from person import Person

class Programmer(Person):
    def __init__(self, name, age, language):
        super().__init__(name, age, job="Programmer")
        self.language = language

    def introduce(self):
        # person 클래스의 hello 메소드 상속하여 호출
        super().hello()
        print(f"나는 {self.language} 언어로 프로그래밍 할 수 있습니다")
"""
* 클래스의 상속

    1. 부모 클래스를 활용하여 자식 클래스를 정의
    2. 부모 클래스의 멤버 변수와 메소드를 상속받아 재사용 또는 확장
    3. 코드 재사용성 증가
    4. 계층 구조 형성

    부모클래스 : 포괄적인, 공통의 개념과 메소드를 정의
    자식클래스 : 구체적인 개념과 메소드를 정의. 
            : 부모 클래스의 속성과 메소드 사용 가능
            : 자식 클래스 만의 속성과 메소드 추가 정의 가능

    - 클래스 정의 시 부모 클래스의 이름을 괄호 안에 넣고 정의
    - 자식 클래스에서 부모 클래스의 속성, 메소드 사용 가능
    - super() 함수를 사용하여 부모 클래스의 속성과 메소드 호출 가능
    - 필요 시, 자식 클래스에서 부모 클래스의 속성과 메소드 재정의(method overriding) 가능

    다중 상속
    - 둘 이상의 부모 클래스로부터 속성과 메소드를 상속받는 것
    - 여러 클래스에서 사용되는 공통 부분을 재사용
    - 다양한 부모 클래스의 특징을 조합해 새로운 클래스 정의
    - 다이아몬드 상속 : 메소드 충돌 가능성 있음
    - 직관성, 코드 가독성 저하되는 단점

 * 추상화
    - 복잡한 구조를 모델링을 통해 필수 동작들로 단순화 하는 과정
    - 다양한 객체들 간의 공통점을 찾고, 이를 포괄하는 상위 추상 클래스 정의
    - 네모 객체와 세모 객체 -> 도형 객체 (부모 클래스) / 공통 함수 정의 (넓이 구하기)
    - 핵심 특징들을 강조함으로써, 여러 기능에 대한 전체 복잡도를 줄이고 직관성을 높임  

    - 추상 클래스를 위한 표준 라이브러리 : abc
    - Abstract Base Class
    - abc 모듚을 통해, 추상 클래스 및 추상 메소드를 정의
    - ABC 클래스 상속을 통해, 추상 클래스를 정의
    - @abstractmethod를 통해 추상 메소드 정의

* 캡슐화
    - 객체의 데이터와 관련 메소드를 하나 묶어 외부로부터 보호
    - 객체의 속성은 외부에서 직접 접근 불가
    - 속성의 변경을 수행하는 메소드를 통해서만 변경
    - 객체 외부에서 접근가능한 기능(public)과, 내부에서만 접근 가능한 기능(private) 구분
    - 구체적인 구현은 외부에 감추어 은닉
    - 데이터의 무결성 보호, 코드의 재사용성 향상 (데이터에 대한 직접적 변조 x)

    - 접근 제어자 : 해당 속성 및 메소드에 대한 접근 가능 권한 설정
    - public : 공개, 해당 객체 및 객체 외부이서도 접근 가능
    - protected : 보호, 해당 객체 및 상속받은 자식 객체에서만 접근 가능
    - private : 비공개, 해당 객체 내부에서만 접근 가능

    - 파이썬은 클래스 및 객체에 대한 거의 모든 것이 공개되어 있음
    - 속성에 대한 접근제어 불가
    - 명명규칙을 통한 접근 제어
    - protected : 비공개 속성 이름 앞에 '_'를 붙여 명명, 접근 제어 강제되지 않음
    - private : 비공개 속성 이름 앞에 '__'를 붙여 명명, 외부에서 접근 불가

* 다형성
    - 다양한 클래스들이 동일한 이름의 메소드를, 각자의 목적에 맞게 사용
    - 각 객체에 따라 같은 이름의 메소드도 다른 동작을 할 수 있게 됨
    - 중복된 코드가 줄어들고, 코드의 추상성이 더 강해져 객체의 역할과 책임이 명확해짐
    - 메소드 오버라이딩 : 상속받은 메소드의 내용을 재정의
"""

