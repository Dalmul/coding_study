알고리즘 
: 어떤 문제를 해결하거나 계산 시 수행되는 명확한 명령문의 나열
: 핵심은 초깃값과 출력값
: 초기값이 주어지고, 유한한 시행횟수를 거쳐 출력 생성 후 종료

알고리즘의 특징
1. 입력과 출력
: 입력값을 받고 결과를 출력 입력 데이터의 성능 비례
2. 유한성
: 유한한 단계로 실행됨. 무한루프에 빠져선 안됨
3. 정확성
: 입력값에 대한 정확한 결과 원하는 목표의 달성
4. 효율성
: 가능한 빠르고 공간 효율적

- 문제 해결 능력 향상
- 효율적 프로그래밍 가능
- 문제 예측과 예방 가능
- 프로그래밍 언어 이해


시간 복잡도
: 특정 알고리즘이 살행데는 데 필요한 연산 시간의 총량
: 측정 척도 - big-O 표기법(chldkrdml ruddn cmrwjd) O(2_n) -> n은 입력의 크기

공간 복잡도
: 알고리즘, 프로그램 수행시 필요한 메모리 공간의 총량

복잡도 - O(n)
: 입력 크기에 비례해 선형적으로 시간/공간 복잡도 증가
: 최악의 경우 입력된 데이터 모두 순회해야한다
: 일반적인 배열에서 데이터 찾기
: 동일한 배열 복사하기

def print_list_elements(lst):
    for element in lst:
        print(element, end=' ')
    print()

복잡도 - O(n_2)
: 입력 크기에 비례해 선형적으로 시간/공간 복잡도 증가
: 데이터 셋이 커질수록 불리
: 다중 반복문 사용하는 경우

복잡도 - O(log n)
: 입력 크기에 따라 로그 형태로 시간/공간복잡도 증가
: 큰 데이터셋에서 빠른 처리가 필요한 경우 선호
: 이진 트리 검색 등

def binary_search(arr, target):
    low, high = 0, len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        mid_value = arr[mid]

        if mid_value == target:
            return mid
        elif mid_value < target:
            low = mid + 1
        else:
            high = mid - 1

    return -1 